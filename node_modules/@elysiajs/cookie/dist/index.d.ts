import { Elysia } from 'elysia';
import { type CookieSerializeOptions } from 'cookie';
export interface SetCookieOptions extends CookieSerializeOptions {
    signed?: boolean;
}
export interface CookieOptions extends SetCookieOptions {
    secret?: string | string[];
}
export interface CookieRequest {
    cookie: Record<string, string>;
    setCookie: (name: string, value: string, options?: SetCookieOptions) => void;
    removeCookie: (name: string) => void;
}
export declare const cookie: (options?: CookieOptions) => Elysia<"", {
    request: {
        unsignCookie: (value: string) => {
            valid: true;
            value: string;
        } | {
            valid: false;
            value: undefined;
        };
        cookie: Record<string, string>;
        setCookie: (name: string, value: string, options?: SetCookieOptions) => void;
        removeCookie: (name: string) => void;
    };
    store: {};
}, {
    type: {};
    error: {};
}, {}, {}, false>;
export default cookie;
