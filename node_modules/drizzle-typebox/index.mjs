import{Type as e}from"@sinclair/typebox";import{getTableColumns as t,is as n}from"drizzle-orm";import{MySqlVarChar as r,MySqlVarBinary as o,MySqlChar as i}from"drizzle-orm/mysql-core";import{PgChar as a,PgVarchar as l,PgUUID as s}from"drizzle-orm/pg-core";import{SQLiteText as m}from"drizzle-orm/sqlite-core";const f=e.Union([e.String(),e.Number(),e.Boolean(),e.Null()]),c=e.Union([f,e.Array(e.Any()),e.Record(e.String(),e.Any())]),u=t=>e.Union([t,e.Null()]);function p(n,r){const o=t(n),i=Object.entries(o);let a=Object.fromEntries(i.map((([e,t])=>[e,d(t)])));r&&(a=Object.assign(a,Object.fromEntries(Object.entries(r).map((([e,t])=>[e,"function"==typeof t?t(a):t])))));for(const[t,n]of i)n.notNull?n.hasDefault&&(a[t]=e.Optional(a[t])):a[t]=e.Optional(u(a[t]));return e.Object(a)}function y(n,r){const o=t(n),i=Object.entries(o);let a=Object.fromEntries(i.map((([e,t])=>[e,d(t)])));r&&(a=Object.assign(a,Object.fromEntries(Object.entries(r).map((([e,t])=>[e,"function"==typeof t?t(a):t])))));for(const[e,t]of i)t.notNull||(a[e]=u(a[e]));return e.Object(a)}const b=/^[\dA-Fa-f]{8}(?:-[\dA-Fa-f]{4}){3}-[\dA-Fa-f]{12}$/;function d(t){let f;if(function(e){return"enumValues"in e&&Array.isArray(e.enumValues)&&e.enumValues.length>0}(t)&&(f=t.enumValues?.length?e.Union(t.enumValues.map((t=>e.Literal(t)))):e.String()),!f)if("custom"===t.dataType)f=e.Any();else if("json"===t.dataType)f=c;else if("array"===t.dataType)f=e.Array(d(t.baseColumn));else if("number"===t.dataType)f=e.Number();else if("bigint"===t.dataType)f=e.BigInt();else if("boolean"===t.dataType)f=e.Boolean();else if("date"===t.dataType)f=e.Date();else if("string"===t.dataType){const s=e.String();(n(t,a)||n(t,l)||n(t,r)||n(t,o)||n(t,i)||n(t,m))&&"number"==typeof t.length&&(s.maxLength=t.length),f=s}else n(t,s)&&(f=e.RegEx(b));return f||(f=e.Any()),f}export{u as Nullable,p as createInsertSchema,y as createSelectSchema,c as jsonSchema};
//# sourceMappingURL=index.mjs.map
